#include "../include/so_long.h"

char	*copy_row(char *line)
{
	int		len;
	char	*row;

	len = 0;
	while (line[len] && line[len] != '\n')
		len++;
	row = (char *)malloc(sizeof(char) * (len + 1));
	if (!row)
		return (NULL);
	row[len] = '\0';
	while (len-- > 0)
		row[len] = line[len];
	return (row);
}

int	count_width(char *line)
{
	int	width;

	if (!line)
		return (0);
	width = 0;
	while (line[width] && line[width] != '\n')
		width++;
	return (width);
}

int	count_height(t_list *read)
{
	int	height;

	if (!read)
		return (0);
	height = ft_lstsize(read);
	return (height);
}

#include "../include/so_long.h"

static void	init_grid(t_map *map, t_file *file)
{
	int	i;

	map->grid = (char **)malloc(sizeof(char *) * (map->height + 1));
	if (!map->grid)
		ft_exit(ERROR_MSG, EXIT_FAILURE);
	i = -1;
	while (++i < map->height)
	{
		map->grid[i] = copy_row(file->read->content);
		if (!map->grid[i])
			ft_exit(ERROR_MSG, EXIT_FAILURE);
		file->read = file->read->next;
	}
	i = -1;
	while (map->grid[++i])
		printf("grid[%d]:\t%s\n", i, map->grid[i]);
}

static void	read_file(t_map *map, t_file *file)
{
	file->fd = open(file->path, O_RDONLY);
	file->line = get_next_line(file->fd);
	if (!file->line)
		ft_exit(ERROR_MSG, EXIT_FAILURE);
	file->read = NULL;
	map->width = count_width(file->line);
	while (1)
	{
		ft_lstadd_back(&file->read, ft_lstnew(file->line));
		// printf("%s", file->line);
		file->line = get_next_line(file->fd);
		if (!file->line)
			break ;
		if (map->width != count_width(file->line)) 
			ft_exit(ERROR_MSG, EXIT_FAILURE);
	}
	// printf("\n\n");
	// while (file->read)
	// {
	// 	printf("%s", (char *)file->read->content);
	// 	file->read = file->read->next;
	// }
	map->height = count_height(file->read);
	// printf("width: %zd height: %zd\n", map->width, map->height);
	close(file->fd);
}

void	init_map(t_game *game)
{
	read_file(&game->map, &game->file);
	init_grid(&game->map, &game->file);
}

#include "../include/so_long.h"

void	parser(t_game *game, int argc, char *argv[])
{
	if (argc < 2 || ft_is_invalid_argv(argc, argv))
		ft_exit(ERROR_MSG, EXIT_FAILURE);
	game->file.path = argv[1];
	game->file.fd = open(argv[1], O_RDONLY);
	if (game->file.fd < 0)
		ft_exit(ERROR_MSG, EXIT_FAILURE);
	close(game->file.fd);
	while (*argv[1] && *argv[1] != '.')
		argv[1]++;
	if (ft_strncmp(argv[1], ".ber", -1))
		ft_exit(ERROR_MSG, EXIT_FAILURE);
}

void	init(t_game *game, int argc, char *argv[])
{
	ft_bzero(game, sizeof(game));
	parser(game, argc, argv);
	init_map(game);
	// init_data(game);
	// init_window(game);
}

int	main(int argc, char *argv[])
{
	t_game	game;

	init(&game, argc, argv);
}
