static void	prerender_map(mlx_t *mlx, t_player *player, t_map *map)
{
	mlx_image_to_window(mlx, map->object.empty_space.source.image, 0, 0);
	mlx_image_to_window(mlx, map->object.wall.source.image, 0, 0);
	mlx_image_to_window(mlx, map->object.exit.hidden.image, 0, 0);
	mlx_image_to_window(mlx, map->object.exit.appear.image, 0, 0);
	mlx_image_to_window(mlx, map->object.collectible.source.image, 0, 0);
	mlx_image_to_window(mlx, player->standing.down.image, 0, 0);
	mlx_image_to_window(mlx, player->standing.down.image, 0, 0);
	mlx_image_to_window(mlx, player->standing.up.image, 0, 0);
	mlx_image_to_window(mlx, player->standing.left.image, 0, 0);
	mlx_image_to_window(mlx, player->standing.right.image, 0, 0);
	mlx_image_to_window(mlx, player->moving.up.image, 0, 0);
	mlx_image_to_window(mlx, player->moving.down.image, 0, 0);
	mlx_image_to_window(mlx, player->moving.left.image, 0, 0);
	mlx_image_to_window(mlx, player->moving.right.image, 0, 0);
}
	if (!param)
		return ;
	game = param;
	point = game->player.position.current;
	if (keydata.action == MLX_PRESS)
	{
		if (keydata.key == MLX_KEY_W || keydata.key == MLX_KEY_UP)
		{
			printf("up\n");
			move_player(game->mlx, &game->player, point, UP);
		}
		else if (keydata.key == MLX_KEY_S || keydata.key == MLX_KEY_DOWN)
		{
			printf("down\n");
			move_player(game->mlx, &game->player, point, DOWN);
		}
		else if (keydata.key == MLX_KEY_A || keydata.key == MLX_KEY_LEFT)
		{
			printf("left\n");
			move_player(game->mlx, &game->player, point, LEFT);
		}
		else if (keydata.key == MLX_KEY_D || keydata.key == MLX_KEY_RIGHT)
		{
			printf("right\n");
			move_player(game->mlx, &game->player, point, RIGHT);
		}	
	}
// static void	set_target_tile(t_player *player, t_map *map, t_direction direction)
// {
// 	if (direction == UP)
// 	{
// 		player->position.facing = UP;
// 		player->move.target.point.y = player->position.current.y - 1;
// 		map->grid[player->position.current.y][player->position.current.x] = EMPTY_SPACE;
// 		map->grid[player->move.target.point.y][player->move.target.point.x] = PLAYER;
// 	}
// 	if (direction == DOWN)
// 	{
// 		player->position.facing = DOWN;
// 		player->move.target.point.y = player->position.current.y + 1;
// 		map->grid[player->position.current.y][player->position.current.x] = EMPTY_SPACE;
// 		map->grid[player->move.target.point.y][player->move.target.point.x] = PLAYER;
// 	}
// 	if (direction == LEFT)
// 	{
// 		player->position.facing = LEFT;
// 		player->move.target.point.y = player->position.current.x - 1;
// 		map->grid[player->position.current.y][player->position.current.x] = EMPTY_SPACE;
// 		map->grid[player->move.target.point.y][player->move.target.point.x] = PLAYER;
// 	}
// 	if (direction == RIGHT)
// 	{
// 		player->position.facing = RIGHT;
// 		player->move.target.point.y = player->position.current.x + 1;
// 		map->grid[player->position.current.y][player->position.current.x] = EMPTY_SPACE;
// 		map->grid[player->move.target.point.y][player->move.target.point.x] = PLAYER;
// 	}
// }

// void	move_player(mlx_t *mlx, t_player *player, t_point current, t_direction direction)
// {
// 	printf("current: %zu, %zu\n", current.x, current.y);
// 	player->path.up.point.x = 0;
// 	player->path.up.point.y = 0;
// 	player->path.down.point.x = 0;
// 	player->path.down.point.y = 0;
// 	player->path.left.point.x = 0;
// 	player->path.left.point.y = 0;
// 	player->path.right.point.x = 0;
// 	player->path.right.point.y = 0;
// 	printf("up: %zu, %zu\n", player->position.current.x, player->position.current.y - 1);
// 	printf("down: %zu, %zu\n", player->position.current.x, player->position.current.y + 1);
// 	printf("left: %zu, %zu\n", player->position.current.x - 1, player->position.current.y);
// 	printf("right: %zu, %zu\n", player->position.current.x + 1, player->position.current.y);
// 	reset_player_stage(mlx, player);
// 	int32_t	n;
// 	if (direction == UP)
// 	{
// 		n = player->standing.up.image->instances->y - 32;
// 		player->standing.up.image->instances->y = n;
// 		player->standing.up.image->instances->enabled = true;
// 	}
// 	if (direction == DOWN)
// 	{
// 		n = player->standing.up.image->instances->y + 32;
// 		player->standing.down.image->instances->y = n;
// 		player->standing.down.image->instances->enabled = true;
// 	}
// 	if (direction == LEFT)
// 	{
// 		n = player->standing.left.image->instances->x - 32;
// 		player->standing.left.image->instances->x = n;
// 		player->standing.left.image->instances->enabled = true;
// 	}
// 	if (direction == RIGHT)
// 	{
// 		n = player->standing.left.image->instances->x + 32;
// 		player->standing.left.image->instances->x = n;
// 		player->standing.left.image->instances->enabled = true;
// 	}
// }
// reset_player_stage(game->mlx, &game->player);
	// if (direction == UP)
	// {
	// 	game->player.standing.up.image->instances->y = game->player.position.current.y - 32;
	// 	game->player.standing.up.image->instances->enabled = true;
	// }
	// if (direction == DOWN)
	// {
	// 	game->player.standing.down.image->instances->y += 32;
	// 	game->player.standing.down.image->instances->enabled = true;
	// }
	// if (direction == LEFT)
	// {
	// 	game->player.standing.left.image->instances->x -= 32;
	// 	game->player.standing.left.image->instances->enabled = true;
	// }
	// if (direction == RIGHT)
	// {
	// 	game->player.standing.right.image->instances->x += 32;
	// 	game->player.standing.right.image->instances->enabled = true;
	// }